#!/bin/bash
set -euo pipefail

# Detect tool root from ilma location  
ILMA_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
TOOL_ROOT="$(dirname "$ILMA_DIR")"

# Handle help and version
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    cat <<EOF
Usage: ilma [COMMAND] [OPTIONS] [PROJECT_PATH]

COMMANDS:
  backup                               Create backup and context mirror (default)
  console                              Show project statistics
  scan                                 Scan project files and detect junk
  prune                                Dry-run analysis of files to clean (no deletion)
  config                               Show configuration details
  
OPTIONS:
  --archive PROJECT_PATH ARCHIVE_PATH  Create archive at specific location
  --type TYPE                          Use project type configuration
  --pretty                             Show detailed output (for scan command)
  --verbose                            Show detailed output (for prune command)
  -h, --help                           Show this help

PROJECT TYPES:
  default, minimal, latex, node, python

EXAMPLES:
  ilma                                 Backup current directory
  ilma ~/build/project                 Backup specific project
  ilma --type latex                    Backup, ignoring common LaTeX cruft
  ilma --archive project archive/      Archive project to a specific directory
  ilma console                         Show project statistics
  ilma scan --type python --pretty     Scan Python project with detailed output
  ilma prune --type latex --verbose    Analyze LaTeX project cruft (dry-run only)
  ilma config                          Show effective configuration

CONFIGURATION:
 ● Create .ilma.conf in project root to customize behavior.
 ● See example configurations: $ILMA_DIR/configs/.
 ● Consider adding .ilma.conf to ~/.config/git/ignore.
EOF
    exit 0
fi

# Parse arguments to determine command and options
COMMAND=""
TYPE=""
ARCHIVE_FLAG=""
CONFIG_FLAG=""
PROJECT_ROOT=""
VERBOSE_FLAG=""
PRETTY_FLAG=""

# First pass - scan all arguments to identify command
COMMAND="backup"  # Default command
for arg in "$@"; do
    case "$arg" in
        backup|console|scan|prune|config)
            COMMAND="$arg"
            break
            ;;
        --config)
            COMMAND="config"
            break
            ;;
    esac
done

# Second pass - parse remaining arguments
while (( $# > 0 )); do
    case "$1" in
        --archive)
            if [[ -n "${2:-}" && -n "${3:-}" ]]; then
                PROJECT_ROOT="$(realpath "$2" 2>/dev/null)" || { echo "Error: Invalid project path '$2'"; exit 1; }
                ARCHIVE_FLAG="$3"
                shift 3
            else
                echo "Error: --archive requires PROJECT_PATH and ARCHIVE_PATH"
                exit 1
            fi
            ;;
        --config)
            CONFIG_FLAG="true"
            shift
            ;;
        --type)
            if [[ -z "${2:-}" ]]; then
                echo "Error: --type requires an argument" >&2
                exit 1
            fi
            TYPE="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE_FLAG="true"
            shift
            ;;
        --pretty)
            PRETTY_FLAG="true"
            shift
            ;;
        backup|console|scan|prune|config)
            # Skip command names
            shift
            ;;
        *)
            if [[ -z "$PROJECT_ROOT" ]]; then
                PROJECT_ROOT="$(realpath "$1" 2>/dev/null)" || { echo "Error: Invalid path '$1'"; exit 1; }
            fi
            shift
            ;;
    esac
done

# Set default project root if not specified
if [[ -z "$PROJECT_ROOT" ]]; then
    PROJECT_ROOT="$(pwd)"
fi

# Validate project directory
if [[ ! -d "$PROJECT_ROOT" ]]; then
    echo "Error: Directory does not exist: $PROJECT_ROOT"
    exit 1
fi

PROJECT_NAME="$(basename "$PROJECT_ROOT")"

# Load configuration
source "$ILMA_DIR/lib/config.sh"
load_config "$PROJECT_ROOT" "$TYPE"

# Handle --config command early (before special modes)
if [[ "$CONFIG_FLAG" == "true" || "$COMMAND" == "config" ]]; then
    show_config "$PROJECT_ROOT"
    exit 0
fi

handle_special_modes "$ARCHIVE_FLAG" "$PROJECT_ROOT"

# Dispatch to appropriate command
case "$COMMAND" in
    backup)
        source "$ILMA_DIR/lib/backup.sh"
        do_backup "$PROJECT_ROOT"
        create_archive "$PROJECT_ROOT" "$ARCHIVE_FLAG"
        
        # Show stats after backup completion
        if [[ "$CONFIG_FOUND" == "true" ]]; then
            # Set mirror directory path for stats
            if [[ -n "$CONTEXT_BASE_DIR" ]]; then
                MIRROR_DIR="$CONTEXT_BASE_DIR/$PROJECT_NAME"
            else
                MAIN_BACKUP_DIR="$BACKUP_BASE_DIR/${PROJECT_NAME}.bak"
                MIRROR_DIR="$MAIN_BACKUP_DIR/$PROJECT_NAME"
            fi
            
            source "$ILMA_DIR/lib/console.sh"
            show_backup_stats "$PROJECT_ROOT" "$MIRROR_DIR"
        fi
        ;;
    console)
        source "$ILMA_DIR/lib/console.sh"
        show_console_summary "$PROJECT_ROOT"
        ;;
    scan)
        # Load config without special mode handling for scan
        source "$ILMA_DIR/lib/config.sh" 
        load_config "$PROJECT_ROOT" "$TYPE"
        
        # Build arguments for scan.sh
        scan_args=()
        [[ -n "$TYPE" ]] && scan_args+=(--type "$TYPE")
        [[ "$PRETTY_FLAG" == "true" ]] && scan_args+=(--pretty)
        scan_args+=("$PROJECT_ROOT")
        
        # Call scan.sh directly
        "$ILMA_DIR/lib/scan.sh" "${scan_args[@]}"
        ;;
    prune)
        # Load config without special mode handling for prune
        source "$ILMA_DIR/lib/config.sh" 
        load_config "$PROJECT_ROOT" "$TYPE"
        # Don't call handle_special_modes for prune command
        source "$ILMA_DIR/lib/prune.sh"
        do_prune "$PROJECT_ROOT" "${VERBOSE_FLAG:-false}" "$TYPE"
        ;;
    config)
        show_config "$PROJECT_ROOT"
        ;;
    *)
        echo "Error: Unknown command '$COMMAND'"
        exit 1
        ;;
esac

exit 0
